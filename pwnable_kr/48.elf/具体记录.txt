<程序员的自我修养>

ELF Format: https://en.wikipedia.org/wiki/Executable_and_Linkable_Format
Dynamic Section: https://docs.oracle.com/cd/E23824_01/html/819-0690/chapter6-42444.html
DT_DEBUG


ELF_HEADER

-- ELF 魔数    0: 0x7f 1: 0x45 2: 0x4c 3: 0x46
-- 32 or 64    4: 0x2
-- 大端 or 小断    5: 0x1
-- 固定数字    6: 0x1
-- 用于扩展    7: 0x0 8: 0x0 9: 0x0 10: 0x0 11: 0x0 12: 0x0 13: 0x0 14: 0x0 15: 0x0
e_type, 文件类型    16: 0x2 17: 0x0 --> 可执行文件 
e_machine, 执行机器 18: 0x3e 19: 0x0 --> amd64
e_version, 固定     20: 0x1 21: 0x0 22: 0x0 23: 0x0
e_entry, 程序入口地址   24: 0x70 25: 0x32 26: 0x49 27: 0x0 28: 0x0 29: 0x0 30: 0x0 31: 0x0
e_phoff, 程序头表的文件偏移量   32: 0x40 33: 0x0 34: 0x0 35: 0x0 36: 0x0 37: 0x0 38: 0x0 39: 0x0
e_shoff, 段表文件偏移量 40: 0xf0 41: 0x43 42: 0x35 43: 0x0 44: 0x0 45: 0x0 46: 0x0 47: 0x0
e_flags, 常用0          48: 0x0 49: 0x0 50: 0x0 51: 0x0
e_ehsize, ELF 文件头本身大小    52: 0x40 53: 0x0
e_phentsize, 程序头表的大小            54: 0x38 55: 0x0
e_phnum, 程序头表中有多少项                 56: 0x9 57: 0x0
e_shentsize, 段表大小             58: 0x40 59: 0x0
e_shnum, 段表中有多少项     60: 0x1d 61: 0x0
e_shstrndx, 字符串表在段表各个表中的下标    62: 0x1c 63: 0x0


ptype, segment 的类型   0: 0x6 1: 0x0 2: 0x0 3: 0x0  ----> 6: 表示这是个程序头表自身
p_flags, 标志位         4: 0x5 5: 0x0 6: 0x0 7: 0x0
p_offset, segment 的文件偏移量      8: 0x40 9: 0x0 10: 0x0 11: 0x0 12: 0x0 13: 0x0 14: 0x0 15: 0x0 ---> 偏移量 0x40，程序头表的偏移量确实是 0x40
p_vaddr, segment 虚拟装载地址   16: 0x40 17: 0x0 18: 0x40 19: 0x0 20: 0x0 21: 0x0 22: 0x0 23: 0x0
p_paddr, segment 物理装载地址   24: 0x40 25: 0x0 26: 0x40 27: 0x0 28: 0x0 29: 0x0 30: 0x0 31: 0x0
p_filesz, segment 的文件长度    32: 0xf8 33: 0x1 34: 0x0 35: 0x0 36: 0x0 37: 0x0 38: 0x0 39: 0x0
p_memsz, segment 的内存长度     40: 0xf8 41: 0x1 42: 0x0 43: 0x0 44: 0x0 45: 0x0 46: 0x0 47: 0x0
p_align, segment 的对齐属性     48: 0x8 49: 0x0 50: 0x0 51: 0x0 52: 0x0 53: 0x0 54: 0x0 55: 0x0

ptype,  0: 0x3 1: 0x0 2: 0x0 3: 0x0  ====> 3: Interpreter(P203)
p_flags,    4: 0x4 5: 0x0 6: 0x0 7: 0x0
p_offset    8: 0x38 9: 0x2 10: 0x0 11: 0x0 12: 0x0 13: 0x0 14: 0x0 15: 0x0 --> 这次的偏移量就不是 0x40 了, 而是这个程序头自身的偏移量
p_vaddr     16: 0x38 17: 0x2 18: 0x40 19: 0x0 20: 0x0 21: 0x0 22: 0x0 23: 0x0
p_paddr     24: 0x38 25: 0x2 26: 0x40 27: 0x0 28: 0x0 29: 0x0 30: 0x0 31: 0x0
32: 0x1c 33: 0x0 34: 0x0 35: 0x0 36: 0x0 37: 0x0 38: 0x0 39: 0x0
40: 0x1c 41: 0x0 42: 0x0 43: 0x0 44: 0x0 45: 0x0 46: 0x0 47: 0x0
48: 0x1 49: 0x0 50: 0x0 51: 0x0 52: 0x0 53: 0x0 54: 0x0 55: 0x0

0: 0x1 1: 0x0 2: 0x0 3: 0x0
4: 0x5 5: 0x0 6: 0x0 7: 0x0
8: 0x0 9: 0x0 10: 0x0 11: 0x0 12: 0x0 13: 0x0 14: 0x0 15: 0x0
16: 0x0 17: 0x0 18: 0x40 19: 0x0 20: 0x0 21: 0x0 22: 0x0 23: 0x0
24: 0x0 25: 0x0 26: 0x40 27: 0x0 28: 0x0 29: 0x0 30: 0x0 31: 0x0
32: 0x94 33: 0xd9 34: 0x2d 35: 0x0 36: 0x0 37: 0x0 38: 0x0 39: 0x0
40: 0x94 41: 0xd9 42: 0x2d 43: 0x0 44: 0x0 45: 0x0 46: 0x0 47: 0x0
48: 0x0 49: 0x0 50: 0x20 51: 0x0 52: 0x0 53: 0x0 54: 0x0 55: 0x0

ptype, segment 的类型       0: 0x1 1: 0x0 2: 0x0 3: 0x0
p_flags, 标志位             4: 0x6 5: 0x0 6: 0x0 7: 0x0
p_offset, segment 的文件偏移量    8: 0xc0 9: 0xdd 10: 0x2d 11: 0x0 12: 0x0 13: 0x0 14: 0x0 15: 0x0
p_vaddr, segment 虚拟装载地址       16: 0xc0 17: 0xdd 18: 0x8d 19: 0x0 20: 0x0 21: 0x0 22: 0x0 23: 0x0
p_paddr, segment 物理装载地址       24: 0xc0 25: 0xdd 26: 0x8d 27: 0x0 28: 0x0 29: 0x0 30: 0x0 31: 0x0
p_filesz, segment 的文件长度        32: 0xf4 33: 0x64 34: 0x7 35: 0x0 36: 0x0 37: 0x0 38: 0x0 39: 0x0
p_memsz, segment 的内存长度         40: 0x28 41: 0xa1 42: 0x9 43: 0x0 44: 0x0 45: 0x0 46: 0x0 47: 0x0
p_align, segment 的对齐属性         48: 0x0 49: 0x0 50: 0x20 51: 0x0 52: 0x0 53: 0x0 54: 0x0 55: 0x0

0: 0x2 1: 0x0 2: 0x0 3: 0x0 ==> Dynamic
4: 0x6 5: 0x0 6: 0x0 7: 0x0
8: 0xd8 9: 0xdd 10: 0x2d 11: 0x0 12: 0x0 13: 0x0 14: 0x0 15: 0x0
16: 0xd8 17: 0xdd 18: 0x8d 19: 0x0 20: 0x0 21: 0x0 22: 0x0 23: 0x0
24: 0xd8 25: 0xdd 26: 0x8d 27: 0x0 28: 0x0 29: 0x0 30: 0x0 31: 0x0
32: 0x20 33: 0x2 34: 0x0 35: 0x0 36: 0x0 37: 0x0 38: 0x0 39: 0x0
40: 0x20 41: 0x2 42: 0x0 43: 0x0 44: 0x0 45: 0x0 46: 0x0 47: 0x0
48: 0x8 49: 0x0 50: 0x0 51: 0x0 52: 0x0 53: 0x0 54: 0x0 55: 0x0

===============================================
Dynamic
===============================================
0 # libpthread.so. 0
d_tag   0: 0x1 1: 0x0 2: 0x0 3: 0x0 4: 0x0 5: 0x0 6: 0x0 7: 0x0
d_un    8: 0x1 9: 0x0 10: 0x0 11: 0x0 12: 0x0 13: 0x0 14: 0x0 15: 0x0

1 # libc.so.6
16: 0x1 17: 0x0 18: 0x0 19: 0x0 20: 0x0 21: 0x0 22: 0x0 23: 0x0
24: 0x87 25: 0x0 26: 0x0 27: 0x0 28: 0x0 29: 0x0 30: 0x0 31: 0x0

2 # libdl.so.2
32: 0x1 33: 0x0 34: 0x0 35: 0x0 36: 0x0 37: 0x0 38: 0x0 39: 0x0
40: 0x11 41: 0x0 42: 0x0 43: 0x0 44: 0x0 45: 0x0 46: 0x0 47: 0x0

3 # libutil.so.1
48: 0x1 49: 0x0 50: 0x0 51: 0x0 52: 0x0 53: 0x0 54: 0x0 55: 0x0
56: 0x1c 57: 0x0 58: 0x0 59: 0x0 60: 0x0 61: 0x0 62: 0x0 63: 0x0

4 # libz.so.1
0: 0x1 1: 0x0 2: 0x0 3: 0x0 4: 0x0 5: 0x0 6: 0x0 7: 0x0
8: 0x29 9: 0x0 10: 0x0 11: 0x0 12: 0x0 13: 0x0 14: 0x0 15: 0x0

5 # libm.so.6
16: 0x1 17: 0x0 18: 0x0 19: 0x0 20: 0x0 21: 0x0 22: 0x0 23: 0x0
24: 0x33 25: 0x0 26: 0x0 27: 0x0 28: 0x0 29: 0x0 30: 0x0 31: 0x0 

6 # address of init function (DY_INIT)
32: 0xc 33: 0x0 34: 0x0 35: 0x0 36: 0x0 37: 0x0 38: 0x0 39: 0x0
40: 0x80 41: 0x64 42: 0x41 43: 0x0 44: 0x0 45: 0x0 46: 0x0 47: 0x0

7 # address of fini function (DY_FINI)
48: 0xd 49: 0x0 50: 0x0 51: 0x0 52: 0x0 53: 0x0 54: 0x0 55: 0x0
56: 0x40 57: 0x8e 58: 0x5c 59: 0x0 60: 0x0 61: 0x0 62: 0x0 63: 0x0

8 #define	DT_INIT_ARRAY	25		/* Array with addresses of init fct */
0: 0x19 1: 0x0 2: 0x0 3: 0x0 4: 0x0 5: 0x0 6: 0x0 7: 0x0
8: 0xc0 9: 0xdd 10: 0x8d 11: 0x0 12: 0x0 13: 0x0 14: 0x0 15: 0x0

9 #define	DT_INIT_ARRAYSZ	27		/* Size in bytes of DT_INIT_ARRAY */
16: 0x1b 17: 0x0 18: 0x0 19: 0x0 20: 0x0 21: 0x0 22: 0x0 23: 0x0
24: 0x8 25: 0x0 26: 0x0 27: 0x0 28: 0x0 29: 0x0 30: 0x0 31: 0x0

10 #define	DT_FINI_ARRAY	26		/* Array with addresses of fini fct */
32: 0x1a 33: 0x0 34: 0x0 35: 0x0 36: 0x0 37: 0x0 38: 0x0 39: 0x0
40: 0xc8 41: 0xdd 42: 0x8d 43: 0x0 44: 0x0 45: 0x0 46: 0x0 47: 0x0

11 #define	DT_FINI_ARRAYSZ	28		/* Size in bytes of DT_FINI_ARRAY */
48: 0x1c 49: 0x0 50: 0x0 51: 0x0 52: 0x0 53: 0x0 54: 0x0 55: 0x0
56: 0x8 57: 0x0 58: 0x0 59: 0x0 60: 0x0 61: 0x0 62: 0x0 63: 0x0

12 #define DT_GNU_HASH	0x6ffffef5	/* GNU-style hash table.  */
0: 0xf5 1: 0xfe 2: 0xff 3: 0x6f 4: 0x0 5: 0x0 6: 0x0 7: 0x0
8: 0x98 9: 0x2 10: 0x40 11: 0x0 12: 0x0 13: 0x0 14: 0x0 15: 0x0

13 #define DT_STRTAB	5		/* Address of string table */
16: 0x5 17: 0x0 18: 0x0 19: 0x0 20: 0x0 21: 0x0 22: 0x0 23: 0x0
24: 0xc8 25: 0xc9 26: 0x40 27: 0x0 28: 0x0 29: 0x0 30: 0x0 31: 0x0

14 #define DT_SYMTAB	6		/* Address of symbol table */
32: 0x6 33: 0x0 34: 0x0 35: 0x0 36: 0x0 37: 0x0 38: 0x0 39: 0x0 
40: 0x0 41: 0x2c 42: 0x40 43: 0x0 44: 0x0 45: 0x0 46: 0x0 47: 0x0

15 #define DT_STRSZ	10		/* Size of string table */
48: 0xa 49: 0x0 50: 0x0 51: 0x0 52: 0x0 53: 0x0 54: 0x0 55: 0x0
56: 0xa2 57: 0x6d 58: 0x0 59: 0x0 60: 0x0 61: 0x0 62: 0x0 63: 0x0

16 #define DT_SYMENT	11		/* Size of one symbol table entry */
0: 0xb 1: 0x0 2: 0x0 3: 0x0 4: 0x0 5: 0x0 6: 0x0 7: 0x0
8: 0x18 9: 0x0 10: 0x0 11: 0x0 12: 0x0 13: 0x0 14: 0x0 15: 0x0

17 #define DT_DEBUG	21		/* For debugging; unspecified */
16: 0x15 17: 0x0 18: 0x0 19: 0x0 20: 0x0 21: 0x0 22: 0x0 23: 0x0
24: 0x40 25: 0x51 26: 0x41 27: 0xd1 28: 0x75 29: 0x7f 30: 0x0 31: 0x0

18 #define DT_PLTGOT	3		/* Processor defined value */
32: 0x3 33: 0x0 34: 0x0 35: 0x0 36: 0x0 37: 0x0 38: 0x0 39: 0x0 
40: 0x0 41: 0xe0 42: 0x8d 43: 0x0 44: 0x0 45: 0x0 46: 0x0 47: 0x0

19 #define DT_PLTRELSZ	2		/* Size in bytes of PLT relocs */
48: 0x2 49: 0x0 50: 0x0 51: 0x0 52: 0x0 53: 0x0 54: 0x0 55: 0x0
56: 0x48 57: 0x1e 58: 0x0 59: 0x0 60: 0x0 61: 0x0 62: 0x0 63: 0x0

==============================
DT_BEBUG -> struct r_debug
==============================
version-> 0: 0x1 1: 0x0 2: 0x0 3: 0x0 4: 0x0 5: 0x0 6: 0x0 7: 0x0
struct link_map* r_map-> 8: 0x68 9: 0x61 10: 0x4a 11: 0x58 12: 0xb8 13: 0x7f 14: 0x0 15: 0x0
(相当于链表的 header)

==============================
struct link_map
以下全部是指针
0x00-0x08   l_addr: 对应的库的基址
0x08-0x10   name: 名字
0x10-0x18   l_ld: .. 
0x18-0x20   link_map* l_next
0x20-0x28   link_map* l_prev
==============================

==============================
找到了 libc_flag.so 地址, 重复上述操作

找 .dynamic
找 .strtab, .symbol
==============================


